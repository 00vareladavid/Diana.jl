var documenterSearchIndex = {"docs":
[{"location":"#About-1","page":"-","title":"About","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"This repository is an implementation of a GraphQL server, a query language for API created by Facebook. See more complete documentation at http://graphql.org/","category":"page"},{"location":"#","page":"-","title":"-","text":"Looking for help? Find resources from the community.","category":"page"},{"location":"#Getting-Started-1","page":"-","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"An overview of GraphQL in general is available in the README for the Specification for GraphQL.","category":"page"},{"location":"#","page":"-","title":"-","text":"This package is intended to help you building GraphQL schemas/types fast and easily.","category":"page"},{"location":"#","page":"-","title":"-","text":"Easy to use: Diana.jl helps you use GraphQL in Julia without effort.\nData agnostic: Diana.jl supports any type of data source: SQL, NoSQL, etc. The intent is to provide a complete API and make your data available through GraphQL.\nMake queries: Diana.jl allows queries to graphql schemas","category":"page"},{"location":"#Installing-1","page":"-","title":"Installing","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"Pkg> add Diana\n#Release\npkg> add Diana#master\n#Development","category":"page"},{"location":"#Client-1","page":"-","title":"Client","text":"","category":"section"},{"location":"#Simple-query-1","page":"-","title":"Simple query","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"using Diana\n\nquery = \"\"\"\n        {\n          neomatrix{\n            nombre\n            linkedin\n          }\n        }\n        \"\"\"\n\nr = Queryclient(\"https://neomatrix.herokuapp.com/graphql\",\n                query,\n                headers = Dict(\"header\" => \"value\"))\nr.Info.status == 200 && println(r.Data)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"{\n  \"data\":{\n    \"neomatrix\":{\n        \"nombre\":\"Acevedo Maldonado Josue\",\n        \"linkedin\":\"https://www.linkedin.com/in/acevedo-maldonado-josue/\"\n    }\n  }\n}","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        query consulta {\n          neomatrix {\n            nombre\n            linkedin\n          }\n        }\n\n        query hola {\n          neomatrix {\n            nombre\n          }\n        }\n        \"\"\"\nr = Queryclient(\"https://neomatrix.herokuapp.com/graphql\",query,operationName=\"hola\")\nr.Info.status == 200 && println(r.Data)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"{\"data\":{\"neomatrix\":{\"nombre\":\"Acevedo Maldonado Josue\"}}}","category":"page"},{"location":"#","page":"-","title":"-","text":"using Diana\ngithub_endpoint = \"https://api.github.com/graphql\"\ngithub_user = # GitHub handle\ngithub_token = # GitHub personal token\ngithub_header = Dict(\"User-Agent\" => github_user)\nclient = GraphQLClient(github_endpoint,\n                       auth = \"bearer $github_token\",\n                       headers = github_header)\nquery = \"\"\"\n        query A{\n          rateLimit {\n            cost\n            remaining\n            resetAt\n          }\n          repository(owner: \"JuliaLang\", name: \"Julia\") {\n            id\n          }\n        }\"\"\"\n\nr = client.Query(query, operationName = \"A\")\nr.Info.status == 200 && println(r.Data)","category":"page"},{"location":"#Query-1","page":"-","title":"Query","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"using Diana\n\nclient = GraphQLClient(\"https://api.graph.cool/simple/v1/movies\")\nclient.serverAuth(\"Bearer my-jwt-token\")\nclient.headers(Dict(\"header\"=>\"value\"))\n\nor\n\nclient = GraphQLClient(\"https://api.graph.cool/simple/v1/movies\",auth=\"Bearer my-jwt-token\",headers=Dict(\"header\"=>\"value\"))","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        {\n          Movie(title: \"Inception\"){\n            actors{\n              name\n            }\n          }\n        }\n        \"\"\"\n\nr = client.Query(query)\nr.Info.status == 200 && println(r.Data)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"{\n  \"data\":{\n    \"Movie\":{\n      \"actors\":[\n        {\n          \"name\":\"Leonardo DiCaprio\"\n        },\n        {\n          \"name\":\"Ellen Page\"\n        },\n        {\n          \"name\":\"Tom Hardy\"\n        },\n        {\n          \"name\":\"Joseph Gordon-Levitt\"\n        },\n        {\n          \"name\":\"Marion Cotillard\"\n        }\n      ]\n    }\n  }\n}","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        query getMovie(\\$title: String!) {\n          Movie(title:\\$title) {\n            releaseDate\n            actors {\n              name\n            }\n          }\n        }\n        \"\"\"\nr = client.Query(query, vars= Dict(\"title\" => \"Inception\"))\n\nprintln(r.Data)","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        query consulta {\n          Movie(title: \"Inception\") {\n            actors{\n              name\n            }\n          }\n        }\n        query hola {\n          Movie(title: \"Inception\") {\n            actors{\n              name\n            }\n          }\n        }\n        \"\"\"\nr = client.Query(query, operationName = \"consulta\")\nr.Info.status == 200 && println(r.Data)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"{\"data\":{\"Movie\":{\"actors\":[{\"name\":\"Leonardo DiCaprio\"},{\"name\":\"Ellen Page\"},{\"name\":\"Tom Hardy\"},{\"name\":\"Joseph Gordon-Levitt\"},{\"name\":\"Marion Cotillard\"}]}}}","category":"page"},{"location":"#Change-serverUrl-1","page":"-","title":"Change serverUrl","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"client.serverUrl(\"https://api.graph.cool/simple/v1/movies\")","category":"page"},{"location":"#Change-headers-1","page":"-","title":"Change headers","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"client.headers(Dict(\"header\" => \"value\"))","category":"page"},{"location":"#Change-serverAuth-1","page":"-","title":"Change serverAuth","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"client.serverAuth(\"Bearer my-jwt-token\")","category":"page"},{"location":"#Query-get-1","page":"-","title":"Query get","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"query=\"https://neomatrix.herokuapp.com/graphql?query=%7B%0A%20%20neomatrix%7B%0A%20%20%20%20nombre%0A%20%20%20%20linkedin%0A%20%20%7D%0A%7D\"\nr = Queryclient(query)\nr.Info.status == 200 && println(r.Data)","category":"page"},{"location":"#Link-1","page":"-","title":"Link","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"It is possible to get links to the graphql query editor","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        {\n          neomatrix{\n            nombre\n            linkedin\n          }\n        }\n        \"\"\"\nr = Queryclient(\"https://neomatrix.herokuapp.com/graphql\",query,getlink=true)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"\"https://neomatrix.herokuapp.com/graphql?query=%7B%0A%20%20neomatrix%7B%0A%20%20%20%20nombre%0A%20%20%20%20linkedin%0A%20%20%7D%0A%7D%0A\"","category":"page"},{"location":"#","page":"-","title":"-","text":"or","category":"page"},{"location":"#","page":"-","title":"-","text":"r = client.Query(query, getlink = true)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"\"https://api.graph.cool/simple/v1/movies?query=%7B%0A%20%20Movie%28title%3A%20%22Inception%22%29%7B%0A%20%20%20%20actors%7B%0A%20%20%20%20%20%20name%0A%20%20%20%20%7D%0A%20%20%7D%0A%7D%0A\"","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        query consulta {\n          neomatrix {\n            nombre\n          }\n        }\n        query hola {\n          neomatrix {\n            nombre\n            linkedin\n          }\n        }\n        \"\"\"\nr = Queryclient(\"https://neomatrix.herokuapp.com/graphql\",\n                query,\n                getlink = true,\n                operationName = \"consulta\")","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"\"https://neomatrix.herokuapp.com/graphql?query=query%20consulta%7B%0A%20%20neomatrix%7B%0A%20%20%20%20%20%20nombre%0A%20%20%20%7D%0A%7D%0Aquery%20hola%7B%0A%20%20neomatrix%7B%0A%20%20%20%20%20%20nombre%0A%20%20%20%20%20%20linkedin%0A%20%20%20%20%7D%0A%7D%0A%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20%20&operationName=consulta\"","category":"page"},{"location":"#Validating-query-1","page":"-","title":"Validating query","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"It is possible to validate the query locally before sending the request, only basic validations are carried out.","category":"page"},{"location":"#","page":"-","title":"-","text":"query = \"\"\"\n        {\n          neomatrix{\n            nombre\n            linkedin\n          }\n        }\n        \"\"\"\nr = Queryclient(query, check = true)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"\"ok\"","category":"page"},{"location":"#","page":"-","title":"-","text":" query = \"\"\"\n         {\n         }\n         neomatrix {\n           nombre\n           linkedin\n         }\n         }\n         \"\"\"\nr = Queryclient(query, true)","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"ERROR: {\"errors\":[{\"locations\": [{\"column\": 3,\"line\": 2}],\"message\": \"Syntax Error GraphQL request (3:2) Expected NAME, found } \"}]}","category":"page"},{"location":"#","page":"-","title":"-","text":"r = client.Query(query, check = true)","category":"page"},{"location":"#Note-1","page":"-","title":"Note","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"The lexer is built based on the Tokenize package code and the Parser on the graphql-js package","category":"page"},{"location":"#Thanks-people-1","page":"-","title":"Thanks people","text":"","category":"section"},{"location":"#Lexer-1","page":"-","title":"Lexer","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"using Diana\n\nTokensgraphql(\"\"\"\n              #\n              query {\n                Region(name: \"The North\") {\n                  NobleHouse(name: \"Stark\") {\n                    castle {\n                      name\n                    }\n                    members {\n                      name\n                      alias\n                    }\n                  }\n                }\n              }\n              \"\"\")","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"29-element Array{Diana.Tokens.Token,1}:\n NAME           query               2,1 - 2,5\n LBRACE         {                   2,7 - 2,7\n NAME           Region              3,3 - 3,8\n LPAREN         (                   3,9 - 3,9\n NAME           name                3,10 - 3,13\n COLON          :                   3,14 - 3,14\n STRING         \\\"The North\\\"       3,15 - 3,25\n RPAREN         )                   3,26 - 3,26\n LBRACE         {                   3,28 - 3,28\n NAME           NobleHouse          4,7 - 4,16\n LPAREN         (                   4,17 - 4,17\n NAME           name                4,18 - 4,21\n COLON          :                   4,22 - 4,22\n STRING         \\\"Stark\\\"           4,23 - 4,29\n RPAREN         )                   4,30 - 4,30\n LBRACE         {                   4,31 - 4,31\n NAME           castle              5,9 - 5,14\n LBRACE         {                   5,15 - 5,15\n NAME           name                6,11 - 6,14\n RBRACE         }                   7,9 - 7,9\n NAME           members             8,9 - 8,15\n LBRACE         {                   8,16 - 8,16\n NAME           name                9,11 - 9,14\n NAME           alias               10,11 - 10,15\n RBRACE         }                   11,7 - 11,7\n RBRACE         }                   12,5 - 12,5\n RBRACE         }                   13,3 - 13,3\n RBRACE         }                   14,1 - 14,1\n ENDMARKER                          15,1 - 15,0","category":"page"},{"location":"#Parser-1","page":"-","title":"Parser","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"using Diana\n\nParse(\"\"\"\n      #\n      query {\n        Region(name: \"The North\") {\n          NobleHouse(name: \"Stark\") {\n            castle {\n              name\n            }\n            members{\n              name\n              alias\n            }\n          }\n        }\n      }\n      \"\"\")","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":" < Node :: Document ,definitions : Any[\n < Node :: OperationDefinition ,operation : query ,selectionSet :\n < Node :: SelectionSet ,selections : Main.Diana.Field[\n < Node :: Field ,name :\n < Node :: Name ,value : Region >  ,arguments : Main.Diana.Argument[\n < Node :: Argument ,name :\n < Node :: Name ,value : name >  ,value : (\":\",\n < Node :: StringValue ,value : \"The North\" > ) > ] ,selectionSet :\n < Node :: SelectionSet ,selections : Main.Diana.Field[\n < Node :: Field ,name :\n < Node :: Name ,value : NobleHouse >  ,arguments : Main.Diana.Argument[\n < Node :: Argument ,name :\n < Node :: Name ,value : name >  ,value : (\":\",\n < Node :: StringValue ,value : \"Stark\" > ) > ] ,selectionSet :\n < Node :: SelectionSet ,selections : Main.Diana.Field[\n < Node :: Field ,name :\n < Node :: Name ,value : castle >  ,selectionSet :\n < Node :: SelectionSet ,selections : Main.Diana.Field[\n < Node :: Field ,name :\n < Node :: Name ,value : name >  > ] >  > ,\n < Node :: Field ,name :\n < Node :: Name ,value : members >  ,selectionSet :\n < Node :: SelectionSet ,selections : Main.Diana.Field[\n < Node :: Field ,name :\n < Node :: Name ,value : name >  > ,\n < Node :: Field ,name :\n < Node :: Name ,value : alias >  > ] >  > ] >  > ] >  > ] >  > ] >","category":"page"},{"location":"#Execute-1","page":"-","title":"Execute","text":"","category":"section"},{"location":"#","page":"-","title":"-","text":"using Diana\n\nschema= \"\"\"\n        type Persona {\n          nombre: String\n          edad: Int\n        }\n\n        type Query {\n          persona: Persona\n          neomatrix: Persona\n        }\n\n        schema {\n          query: Query\n        }\n        \"\"\"\n\nresolvers = Dict(\n    \"Query_neomatrix\" => (obj, args, ctx, info) -> (return Dict(\"nombre\" => \"josue\", \"edad\" => 5)),\n    \"Query_persona\" => (obj, args, ctx, info) -> begin\n        return Dict(\"nombre\" => \"Diana\", \"edad\" => 15)\n    end,\n    \"Persona_nombre\" => (obj, args, ctx, info) -> (return ctx[\"nombre\"]),\n    \"Persona_edad\" => (obj, args, ctx, info) -> (return ctx[\"edad\"])\n    )\n\nmy_schema = Schema(schema, resolvers)\n\nquery = \"\"\"\n        query {\n          neomatrix {\n            nombre\n          }\n        }\n        \"\"\"\ndata = my_schema.execute(query)\n","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"{\"datos\":{\n  \"neomatrix\":{\n    \"nombre\":\"josue\"\n    }\n  }\n}\"","category":"page"},{"location":"#","page":"-","title":"-","text":"\nquery = \"\"\"\n        query {\n          persona {\n            nombre\n          }\n        }\n        \"\"\"\n\ndata = my_schema.execute(query)\n","category":"page"},{"location":"#","page":"-","title":"-","text":"result:","category":"page"},{"location":"#","page":"-","title":"-","text":"{\"datos\":{\n  \"persona\":{\n    \"nombre\":\"Diana\"\n    }\n  }\n}","category":"page"}]
}
